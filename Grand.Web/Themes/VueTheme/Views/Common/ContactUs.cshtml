@model ContactUsModel
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_ColumnsOne";

    //title
    pagebuilder.AddTitleParts(T("PageTitle.ContactUs").Text);
}
<div class="page contact-page">
    <h1 class="generalTitle h2">@T("PageTitle.ContactUs")</h1>
    <div class="generalMarginSupporter text-left">
        @await Component.InvokeAsync("TopicBlock", new { systemName = "ContactUs" })
        @await Component.InvokeAsync("Widget", new { widgetZone = "contactus_top" })
        @if (Model.SuccessfullySent)
        {
            <div class="alert alert-info">
                @Model.Result
            </div>
        }
        else
        {
            <form asp-route="ContactUs" method="post" id="form" name="form" v-on:submit.prevent="validateBeforeSubmit">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                <div class="form-fields">
                    <div class="form-group">
                        <label asp-for="FullName" class="col-form-label">@T("ContactUs.FullName"):</label>
                        <span class="required">*</span>
                        <input asp-for="FullName" placeholder="@T("ContactUs.FullName.Hint")" class="fullname form-control" v-validate="'required'" />
                        <span v-if="veeErrors.first('FullName')" class="field-validation-error">@T("contactus.fullname.required")</span>
                        <span asp-validation-for="FullName"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Email" class="col-form-label">@T("ContactUs.Email"):</label>
                        <span class="required">*</span>
                        <input asp-for="Email" placeholder="@T("ContactUs.Email.Hint")" class="form-control email" v-validate="'required|email'" />
                        <span asp-validation-for="Email"></span>
                    </div>
                    @if (Model.SubjectEnabled)
                    {
                        <div class="form-group">
                            <label asp-for="Subject" class="col-form-label">@T("ContactUs.Subject"):</label>
                            <span class="required">*</span>
                            <input asp-for="Subject" placeholder="@T("ContactUs.Subject.Hint")" class="form-control subject" v-validate="'required'" />
                            <span v-if="veeErrors.first('Subject')" class="field-validation-error">@T("contactus.Subject.required")</span>
                            <span asp-validation-for="Subject"></span>
                        </div>
                    }
                <div class="form-group">
                    <label asp-for="Enquiry" class="col-form-label">@T("ContactUs.Enquiry"):</label>
                    <span class="required">*</span>
                    <textarea asp-for="Enquiry" placeholder="@T("ContactUs.Enquiry.Hint")" class="form-control enquiry" v-validate="'required'"></textarea>
                    <span v-if="veeErrors.first('Enquiry')" class="field-validation-error">@T("contactus.Enquiry.required")</span>
                    <span asp-validation-for="Enquiry"></span>
                </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            <captcha />
                        </div>
                    }
                </div>
                <partial name="_ContactAttributes" model="Model.ContactAttributes" />
                <div class="buttons mt-1 mb-1">
                    <input type="submit" name="send-email" class="btn btn-info contact-us-button" value="@T("ContactUs.Button")" />
                </div>
            </form>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "contactus_bottom" })
    </div>
</div>
<script asp-location="Header">
    Vue.use(VeeValidate, {
        // This is the default
        inject: true,
        // Important to name this something other than 'fields'
        fieldsBagName: 'veeFields',
        // This is not required but avoids possible naming conflicts
        errorBagName: 'veeErrors',
        classes: true,
        classNames: {
            valid: 'is-valid',
            invalid: 'is-invalid'
        }
    })
</script>