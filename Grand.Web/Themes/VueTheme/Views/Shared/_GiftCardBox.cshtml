
    <div v-if="GiftCardBox.Display" class="giftcard-box">
        <div class="title">
            <strong>@T("ShoppingCart.GiftCardCouponCode")</strong>
        </div>
        <div class="coupon-code">
            <div class="form-group">
                <span class="col-form-label">@T("ShoppingCart.GiftCardCouponCode.Tooltip")</span>
                <div class="input-group">
                    <input id="giftcardcouponcode" name="giftcardcouponcode" type="text" class="form-control gift-card-coupon-code" />
                    <label for="giftcardcouponcode" class="sr-only">@T("ShoppingCart.GiftCardCouponCode.Button")</label>
                    <span class="input-group-append">
                        <button type="button" name="applygiftcardcouponcode" id="applygiftcardcouponcode" onclick="ApplyGiftCard(this)" class="btn btn-outline-secondary apply-discount-coupon-code-button"
                                data-href="@Url.RouteUrl("ApplyGiftCard")">
                            @T("ShoppingCart.GiftCardCouponCode.Button")
                        </button>
                    </span>
                </div>
            </div>
        </div>
            <div v-if="GiftCardBox.Message !== null && GiftCardBox.IsApplied" class="alert alert-success message-success text-center">
                {{GiftCardBox.Message}}
            </div>
            <div v-if="GiftCardBox.Message !== null && GiftCardBox.IsApplied == false" class="alert alert-danger message-failure text-center">
                {{GiftCardBox.Message}}
            </div>
    </div>
    <script asp-location="Footer">
        function ApplyGiftCard(e) {
            var href = e.getAttribute('data-href');
            var giftCardData = {
                giftcardcouponcode: document.getElementById('giftcardcouponcode').value,
            };
            addAntiForgeryToken(giftCardData);
            var bodyFormData = new FormData();
            bodyFormData.append('giftcardcouponcode', document.getElementById('giftcardcouponcode').value);
            bodyFormData.append('__RequestVerificationToken', document.querySelector('input[name=__RequestVerificationToken]').value);
            axios({
                method: 'post',
                url: href,
                data: bodyFormData,
                headers: {'Content-Type': 'multipart/form-data' }
            }).then(function (response) {
                var cartall = response.data.cart;
                var newcart = JSON.parse(cartall);
                vm.ButtonPaymentMethodViewComponentNames = newcart.ButtonPaymentMethodViewComponentNames,
                    vm.CheckoutAttributeInfo = newcart.CheckoutAttributeInfo,
                    vm.CheckoutAttributes = newcart.CheckoutAttributes,
                    vm.DiscountBox = newcart.DiscountBox,
                    vm.DisplayTaxShippingInfo = newcart.DisplayTaxShippingInfo,
                    vm.GiftCardBox = newcart.GiftCardBox,
                    vm.IsAllowOnHold = newcart.IsAllowOnHold,
                    vm.IsGuest = newcart.IsGuest,
                    vm.Items = newcart.Items,
                    vm.MinOrderSubtotalWarning = newcart.MinOrderSubtotalWarning,
                    vm.OnePageCheckoutEnabled = newcart.OnePageCheckoutEnabled,
                    vm.OrderReviewData = newcart.OrderReviewData,
                    vm.ShowCheckoutAsGuestButton = newcart.ShowCheckoutAsGuestButton,
                    vm.ShowProductImages = newcart.ShowProductImages,
                    vm.ShowSku = newcart.ShowSku,
                    vm.TermsOfServiceOnOrderConfirmPage = newcart.TermsOfServiceOnOrderConfirmPage,
                    vm.TermsOfServiceOnShoppingCartPage = newcart.TermsOfServiceOnShoppingCartPage,
                    vm.TermsOfServicePopup = newcart.TermsOfServicePopup,
                    vm.Warnings = newcart.Warnings,
                    vm.DiscountBox = newcart.DiscountBox
                checkoutAttributeChange();
            }).then(function () {
                axios({
                    baseURL: '/vue/component',
                    method: 'get',
                    params: { component: 'OrderTotals' },
                }).then(response => (
                    vm.DisplayTax = response.data.DisplayTax,
                    vm.DisplayTaxRates = response.data.DisplayTaxRates,
                    vm.GiftCards = response.data.GiftCards,
                    vm.OrderTotal = response.data.OrderTotal,
                    vm.OrderTotalDiscount = response.data.OrderTotalDiscount,
                    vm.PaymentMethodAdditionalFee = response.data.PaymentMethodAdditionalFee,
                    vm.RedeemedRewardPoints = response.data.RedeemedRewardPoints,
                    vm.RedeemedRewardPointsAmount = response.data.RedeemedRewardPointsAmount,
                    vm.RequiresShipping = response.data.RequiresShipping,
                    vm.SelectedShippingMethod = response.data.SelectedShippingMethod,
                    vm.Shipping = response.data.Shipping,
                    vm.SubTotal = response.data.SubTotal,
                    vm.SubTotalDiscount = response.data.SubTotalDiscount,
                    vm.Tax = response.data.Tax,
                    vm.TaxRates = response.data.TaxRates,
                    vm.WillEarnRewardPoints = response.data.WillEarnRewardPoints
                ))
            });
        }
    </script>