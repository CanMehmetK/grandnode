@inject IWebHelper webHelper
@inject SeoSettings seoSettings
@using Grand.Framework.Themes
@using Grand.Framework.UI
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject IPageHeadBuilder pagebuilder
@{
    var themeName = themeContext.WorkingThemeName;
    pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/cart/cart.css", themeName));
    pagebuilder.AppendScriptParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/script/cart.js", themeName));
}
<div class="order-summary-content mt-3" id="ordersummarypagecart">
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_before" })
    <div v-if="OrderReviewData">
        <div v-if="OrderReviewData.Display"></div>
    </div>
    <div v-if="Items[0]">
        <ul v-if="Warnings[0]" class="px-0 mb-3">
            <li v-for="item in Warnings">
                <span class="text-danger">{{item}}</span>
            </li>
        </ul>
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="shopping-cart-container">
                <div class="shopping-cart-container">
                    <table class="shopping-cart table">
                        <colgroup>
                            <col span="1">
                            <col span="1">
                            <col span="1">
                            <col>
                            <col span="1">
                            <col span="1">
                            <col span="1">
                        </colgroup>
                        <thead>
                            <tr>
                                <th v-if="IsAllowOnHold && IsEditable" class="cart text-center"></th>
                                <th v-if="ShowProductImages" class="product-picture text-center">
                                    @T("ShoppingCart.Image")
                                </th>
                                <th class="product text-center">
                                    @T("ShoppingCart.Product(s)")
                                </th>
                                <th class="unit-price text-center">
                                    @T("ShoppingCart.UnitPrice")
                                </th>
                                <th class="quantity text-center">
                                    @T("ShoppingCart.Quantity")
                                </th>
                                <th class="subtotal text-center">
                                    @T("ShoppingCart.ItemTotal")
                                </th>
                                <th v-if="IsEditable" class="remove-from-cart text-center">
                                    @T("Remove")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="item in Items">
                                <td v-if="IsAllowOnHold && IsEditable" class="onhold-cart">
                                    <label class="custom-control custom-switch mb-0 pl-0">
                                        <input :id="'checkbox_' + item.Id" type="checkbox" :checked="item.IsCart" class="custom-control-input changeshoppingcartitem" :data-href="'/changetypecartitem/' + item.Id + '?status=' + item.IsCart" onchange="ChangeShoppingCart(this)" />
                                        <span class="custom-control-label ml-5"></span>
                                    </label>
                                </td>
                                <td v-if="ShowProductImages" class="product-picture text-center">
                                    <a :href="'/' + item.ProductSeName">
                                        <img alt="item.Picture.AlternateText" :src="item.Picture.ImageUrl" title="item.Picture.Title" />
                                    </a>
                                </td>
                                <td class="product">
                                    <a :href="'/' + item.ProductSeName" class="product-name">
                                        {{item.ProductName}}
                                    </a>
                                    <span v-if="ShowSku" class="sku-number">
                                        {{item.Sku}}
                                    </span>
                                    <div v-if="item.AttributeInfo != ''" v-html="item.AttributeInfo" class="attributes small"></div>
                                    <div v-if="item.WarehouseName != null" v-html="item.WarehouseName" class="attributes small"></div>
                                    <div v-if="item.VendorName != null" v-html="item.VendorName" class="attributes small"></div>
                                    <div v-if="item.AuctionInfo != ''" v-html="item.AuctionInfo" class="attributes small"></div>
                                    <div v-if="item.RecurringInfo != null" v-html="item.RecurringInfo" class="recurring-info"></div>
                                    <div v-if="item.ReservationInfo != null" v-html="item.ReservationInfo" class="rental-info attributes small"></div>
                                    <div v-if="IsEditable || item.AllowItemEditing" class="edit-item mb-1 mt-1">
                                        <a class="btn btn-sm btn-secondary" :href="'/' + item.ProductSeName + '?updatecartitemid=' + item.Id">@T("Common.Edit")</a>
                                    </div>
                                    <div v-if="item.Warnings > 0" class="message-error alert alert-danger">
                                        <ul v-for="warning in item.Warnings" class="mb-0 p-0">
                                            <li>123</li>
                                        </ul>
                                    </div>
                                </td>
                                <td class="unit-price">
                                    <span class="product-unit-price price">{{item.UnitPrice}}</span>
                                    <div v-if="item.UnitPriceWithoutDiscountValue != item.UnitPriceValue && item.UnitPriceWithoutDiscountValue > 0" class="text-center">
                                        <del class="small text-danger">{{item.UnitPriceWithoutDiscount}}</del>
                                    </div>
                                </td>
                                <td class="quantity">
                                    <div v-if="IsEditable">
                                        <div v-if="item.AllowedQuantities[0]">
                                            <select :id="'itemquantity' + item.Id" :name="'itemquantity' + item.Id" class="custom-select form-control qty-dropdown" data-href="@Url.RouteUrl("UpdateCart")" onchange="ChangeShoppingCart(this)">
                                                <option v-for="qty in item.AllowedQuantities" :selected="qty.Selected" :value="qty.Value">{{qty.Value}}</option>
                                            </select>
                                        </div>
                                        <div v-else>
                                            <input :id="'itemquantity' + item.Id" :name="'itemquantity' + item.Id" type="number" :value="item.Quantity" min="1" data-href="@Url.RouteUrl("UpdateCart")" onchange="ChangeShoppingCart(this)" class="qty-input form-control text-center" />
                                        </div>
                                    </div>
                                    <div v-else>
                                        <input :id="'itemquantity' + item.Id" :name="'itemquantity' + item.Id" type="number" :value="item.Quantity" class="qty-input form-control text-center" readonly />
                                    </div>
                                </td>
                                <td class="subtotal">
                                    <div v-if="item.Discount" class="d-flex flex-column">
                                        <p class="mb-0 prod-total">{{item.SubTotal}}</p>
                                        <div class="discount text-success text-center">
                                            <span>@T("ShoppingCart.ItemYouSave"): </span>
                                            <span>{{item.Discount}}</span>
                                            <span v-if="item.DiscountedQty > 0" class="font-weight-light font-italic">@T("ShoppingCart.DiscountedQty"): </span>
                                            <span v-if="item.DiscountedQty > 0" class="font-weight-light font-italic">{{item.DiscountedQty}}</span>
                                        </div>
                                    </div>
                                    <div v-else>
                                        <p class="mb-0 prod-total">{{item.SubTotal}}</p>
                                    </div>
                                </td>
                                <td v-if="IsEditable" class="remove-from-cart text-center">
                                    <b-button variant="link" class="deleteshoppingcartitem" onclick="removefromcart(this)" :data-href="('/deletecartitem/'+ item.Id +'?shoppingcartpage=True')">
                                        <b-icon icon="trash" variant="danger"></b-icon>
                                    </b-button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div v-if="IsEditable" class="common-buttons btn-group btn-group-sm mb-3">
                <a onclick="location.href='@(Url.RouteUrl("ClearCart"))'" class="btn btn-danger removeAll-cart-button"><span>@T("shoppingcart.clearcart")</span></a>
                <a onclick="location.href=('@(Url.RouteUrl("ContinueShopping"))')" class="btn btn-outline-secondary continue-shopping-button">@T("shoppingcart.continueshopping")</a>
            </div>
            <div class="cart-options">
                <div class="row">
                    <div v-if="IsEditable" class="col-12 col-md-6 checkoutAttributes">
                        <partial name="_CheckoutAttributes" />
                    </div>
                    <div v-if="CheckoutAttributeInfo" class="selected-checkout-attributes col-sm-3 col-md-6 col-12 ml-auto justify-content-end text-right mt-3">
                        <div v-html="CheckoutAttributeInfo"></div>
                    </div>
                </div>
            </div>
            <div v-if="IsEditable && Items != null && DisplayTaxShippingInfo" class="tax-shipping-info d-flex justify-content-end mt-2 mb-2">
                <div class="taxHelper">
                    @{
                        var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    }
                    <div class="tax-shipping-info d-flex justify-content-end mt-2 mb-2">
                        <span class="taxHelper">
                            @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = TopicSeNameConstants.Shippinginfo }))
                        </span>
                    </div>
                </div>
            </div>
            <div class="cart-footer mt-3 mb-3">
                <div class="row">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_cart_footer" })
                    <div v-if="IsEditable" class="col-sm-6 col-12 cart-collaterals">
                        <div v-if="GiftCardBox || DiscountBox" class="deals">
                            <partial name="_GiftCardBox"/>
                            <partial name="_DiscountBox"/>
                            @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                        </div>
                        @await Component.InvokeAsync("EstimateShipping")
                    </div>
                    <div class="col-sm-6 col-12 totals float-sm-right ml-auto pt-0">
                        <partial name="OrderTotals" />
                        <div v-if="IsEditable && MinOrderSubtotalWarning != null" class="alert alert-danger">
                            {{MinOrderSubtotalWarning}}
                        </div>
                        <div v-if="IsEditable" class="checkout-buttons text-center float-sm-right mt-3">
                            <div v-if-else="MinOrderSubtotalWarning !== null">
                                <b-button v-if="TermsOfServiceOnShoppingCartPage" id="checkout" name="checkout" @@click="showMsgBoxOne" variant="info" class="checkout-button">
                                    <span v-if="IsGuest">
                                        @T("Checkout.Button.Login")
                                    </span>
                                    <span v-else>
                                        @T("Checkout.Button")
                                    </span>
                                </b-button>
                                <b-button v-else id="checkout" name="checkout" @@click="document.querySelector('#shopping-cart-form').setAttribute('action', '@Url.RouteUrl("StartCheckout")');document.querySelector('#shopping-cart-form').submit();" variant="info" class="checkout-button">
                                    <span v-if="IsGuest">
                                        @T("Checkout.Button.Login")
                                    </span>
                                    <span v-else>
                                        @T("Checkout.Button")
                                    </span>
                                </b-button>
                            </div>
                        </div>
                        <div class="addon-buttons">
                            <div v-for="pm in ButtonPaymentMethodViewComponentNames">
                                <div v-html="pm"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                @await Component.InvokeAsync("CrossSellProducts")
            </div>
        </form>
    </div>
    <div v-else class="no-data alert alert-info text-center">
        @T("ShoppingCart.CartIsEmpty")
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
</div>
<script>
    var path = window.location.pathname;
    if (path == "cart") {
        IsEditable = true
    } else {
        IsEditable = false
    }
    Vue.mixin({
        props: {
            ButtonPaymentMethodViewComponentNames: null,
            CheckoutAttributeInfo: null,
            CheckoutAttributes: null,
            DiscountBox: null,
            DisplayTaxShippingInfo: null,
            GiftCardBox: null,
            IsAllowOnHold: null,
            IsEditable: null,
            IsGuest: null,
            Items: null,
            Fields: null,
            MinOrderSubtotalWarning: null,
            OnePageCheckoutEnabled: null,
            OrderReviewData: null,
            ShowCheckoutAsGuestButton: null,
            ShowProductImages: null,
            ShowSku: null,
            TermsOfServiceOnOrderConfirmPage: null,
            TermsOfServiceOnShoppingCartPage: null,
            TermsOfServicePopup: null,
            Warnings: null,
            DisplayTax: null,
            DisplayTaxRates: null,
            GiftCards: null,
            OrderTotal: null,
            OrderTotalDiscount: null,
            PaymentMethodAdditionalFee: null,
            RedeemedRewardPoints: null,
            RedeemedRewardPointsAmount: null,
            RequiresShipping: null,
            SelectedShippingMethod: null,
            Shipping: null,
            SubTotal: null,
            SubTotalDiscount: null,
            Tax: null,
            TaxRates: null,
            WillEarnRewardPoints: null
        },
        created() {
            this.updateCart(),
            this.updateTotals()
        },
        methods: {
            updateCart() {
                axios({
                    baseURL: '/vue/component',
                    method: 'get',
                    params: { component: 'OrderSummary' },
                }).then(response => {
                    this.ButtonPaymentMethodViewComponentNames = response.data.ButtonPaymentMethodViewComponentNames;
                    this.CheckoutAttributeInfo = response.data.CheckoutAttributeInfo;
                    this.CheckoutAttributes = response.data.CheckoutAttributes;
                    this.DiscountBox = response.data.DiscountBox;
                    this.DisplayTaxShippingInfo = response.data.DisplayTaxShippingInfo;
                    this.GiftCardBox = response.data.GiftCardBox;
                    this.IsAllowOnHold = response.data.IsAllowOnHold;
                    if (window.location.pathname == '/cart') {
                        this.IsEditable = true;
                    } else {
                        this.IsEditable = false;
                    }
                    this.IsGuest = response.data.IsGuest;
                    this.Items = response.data.Items;
                    this.MinOrderSubtotalWarning = response.data.MinOrderSubtotalWarning;
                    this.OnePageCheckoutEnabled = response.data.OnePageCheckoutEnabled;
                    this.OrderReviewData = response.data.OrderReviewData;
                    this.ShowCheckoutAsGuestButton = response.data.ShowCheckoutAsGuestButton;
                    this.ShowProductImages = response.data.ShowProductImages;
                    this.ShowSku = response.data.ShowSku;
                    this.TermsOfServiceOnOrderConfirmPage = response.data.TermsOfServiceOnOrderConfirmPage;
                    this.TermsOfServiceOnShoppingCartPage = response.data.TermsOfServiceOnShoppingCartPage;
                    this.TermsOfServicePopup = response.data.TermsOfServicePopup;
                    this.Warnings = response.data.Warnings;
                    this.DiscountBox = response.data.DiscountBox;
                });
            },
            updateTotals() {
                axios({
                    baseURL: '/vue/component',
                    method: 'get',
                    params: { component: 'OrderTotals' },
                }).then(response => (
                    this.DisplayTax = response.data.DisplayTax,
                    this.DisplayTaxRates = response.data.DisplayTaxRates,
                    this.GiftCards = response.data.GiftCards,
                    this.OrderTotal = response.data.OrderTotal,
                    this.OrderTotalDiscount = response.data.OrderTotalDiscount,
                    this.PaymentMethodAdditionalFee = response.data.PaymentMethodAdditionalFee,
                    this.RedeemedRewardPoints = response.data.RedeemedRewardPoints,
                    this.RedeemedRewardPointsAmount = response.data.RedeemedRewardPointsAmount,
                    this.RequiresShipping = response.data.RequiresShipping,
                    this.SelectedShippingMethod = response.data.SelectedShippingMethod,
                    this.Shipping = response.data.Shipping,
                    this.SubTotal = response.data.SubTotal,
                    this.SubTotalDiscount = response.data.SubTotalDiscount,
                    this.Tax = response.data.Tax,
                    this.TaxRates = response.data.TaxRates,
                    this.WillEarnRewardPoints = response.data.WillEarnRewardPoints
                ))
            },
            showMsgBoxOne() {
                const h = this.$createElement

                const titleVNode = h('div', { domProps: { innerHTML: '<h5>@T("Checkout.TermsOfService.IAccept")</h5>' } })
                const messageVNode = h('div', { domProps: { innerHTML: '@T("Checkout.TermsOfService.PleaseAccept") <a href="@Url.RouteUrl("Topic", new { SeName = TopicSeNameConstants.Conditionsofuse })" target="popup" onclick="window.open(@Url.RouteUrl("Topic", new { SeName = TopicSeNameConstants.Conditionsofuse }))">@T("Checkout.TermsOfService.Read")</a>' } })

                this.$bvModal.msgBoxConfirm([messageVNode], {
                    title: [titleVNode],
                    centered: true,
                    size: 'md',
                    okVariant: 'info',
                    okTitle: 'Ok',
                    cancelTitle: 'Cancel',
                    cancelVariant: 'danger',
                    footerClass: 'p-2',
                    hideHeaderClose: false,
                })
                    .then(value => {
                        this.boxOne = value
                        if (vm.MinOrderSubtotalWarning == null && vm.Warnings.length == 0) {
                            if (value == true) {
                                document.querySelector('#shopping-cart-form').setAttribute('action', '@Url.RouteUrl("StartCheckout")');
                                document.querySelector('#shopping-cart-form').submit();
                            }
                        } else {
                            this.$bvToast.toast(vm.MinOrderSubtotalWarning, {
                                title: '@T("vue.shoppingcart.warning")',
                                variant: 'danger',
                                solid: true
                            })
                        }
                    })
                    .catch(err => {

                    })
            },
        }
    });
    function removefromcart(el) {
        var href = el.getAttribute('data-href');
        deleteitem(href);
    }
</script>