@model CustomerDownloadableProductsModel
@using Grand.Web.Models.Customer;
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_ColumnsTwoMix";

    //title
    pagebuilder.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.DownloadableProducts })
}
<section class="page account-page downloadable-products-page pl-lg-3 pt-lg-0 pt-3">
    <h1 class="h2 generalTitle">@T("Account.DownloadableProducts")</h1>
    @if (Model.Items.Any())
    {
            <b-table :fields="fields" :items="items" responsive>
                <template v-slot:cell(order)="data">
                    <div v-html="data.value.order"></div>
                </template>
                <template v-slot:cell(date)="data">
                    <div v-html="data.value.date"></div>
                </template>
                <template v-slot:cell(product)="data">
                    <div v-html="data.value.product"></div>
                </template>
                <template v-slot:cell(download)="data">
                    <div v-html="data.value.download"></div>
                </template>
            </b-table>
            <script>
                var mix = {
                    data() {
                        return {
                            fields: [
                                { key: 'order', label: '@T("DownloadableProducts.Fields.Order")', sortable: true },
                                { key: 'date', label: '@T("DownloadableProducts.Fields.Date")', sortable: true },
                                { key: 'product', label: '@T("DownloadableProducts.Fields.Product")', sortable: true  },
                                { key: 'download', label: '@T("DownloadableProducts.Fields.Download")', sortable: true  },
                            ],
                            items: [
                                @for (int i = 0; i < Model.Items.Count; i++)
                                {
                                    var item = Model.Items[i];
                                    <text>
                                    {
                                        order: {
                                            order: '<a href="@Url.RouteUrl("OrderDetails", new { orderId = item.OrderId })">@item.OrderNumber</a>'
                                        },
                                        date: {
                                            date: '@item.CreatedOn.ToString("d")'
                                        },
                                        product: {
                                            product: '<a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })">@item.ProductName</a>@if (!String.IsNullOrEmpty(item.ProductAttributes)) {<div class="attributes">@Html.Raw(item.ProductAttributes)</div>}'
                                        },
                                        download: {
                                            download: '@if (!String.IsNullOrEmpty(item.DownloadId)) { <a href="@Url.RouteUrl("GetDownload", new { orderItemId = item.OrderItemGuid })">@T("DownloadableProducts.Fields.Download")</a>}else {@T("DownloadableProducts.Fields.Download.NA")}@if (!String.IsNullOrEmpty(item.LicenseId))@if (!String.IsNullOrEmpty(item.LicenseId)) {<a href="@Url.RouteUrl("GetLicense", new { orderItemId = item.OrderItemGuid })">@T("DownloadableProducts.Fields.DownloadLicense")</a> }'
                                        },

                                    },
                                    </text>
                                }
                            ]
                        }
                    }
                }
            </script>
    }
    else
    {
        <div class="no-data alert alert-info">
            @T("DownloadableProducts.NoItems")
        </div>
        <script>
            var mix = {
            }
        </script>
    }
</section>
