@model WishlistModel
@inject IWebHelper webHelper
@inject SeoSettings seoSettings
@using Grand.Framework.Themes
@using Grand.Framework.UI
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject IPageHeadBuilder pagebuilder
@{
    var themeName = themeContext.WorkingThemeName;
    pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/cart/cart.css", themeName));
}
@{
    Layout = "_ColumnsCart";

    //title
    pagebuilder.AddTitleParts(T("PageTitle.Wishlist").Text);
}
<div class="page wishlist-page mt-3">
    <h2 class="generalTitle text-center mt-3">
        @if (Model.IsEditable)
        {
            @T("Wishlist")
        }
        else
        {
            @String.Format(T("Wishlist.WishlistOf").Text, Model.CustomerFullname)
        }
    </h2>
    @if (Model.Items.Any())
    {
        <div class="wishlist-content mt-3">
            @if (Model.Warnings.Any())
            {
                <div class="message-error">
                    <ul>
                        @foreach (var warning in Model.Warnings)
                        {
                            <li>@warning</li>
                        }
                    </ul>
                </div>
            }
            <form asp-route="Wishlist" method="post">
                <div class="shopping-cart-container">
                    <template>
                        <div class="static-cart">
                            <b-table :fields="fields" :items="items" id="cart-table" class="shopping-cart">
                                <template v-slot:cell(picture)="data">
                                    <b-link :href="data.value.href" :title="data.value.title">
                                        <b-img-lazy :src="data.value.src" :alt="data.value.alt" :title="data.value.title"></b-img-lazy>
                                    </b-link>
                                </template>
                                <template v-slot:cell(product)="data">
                                    <div v-html="data.value.name"></div>
                                    <div v-html="data.value.sku"></div>
                                    <div v-html="data.value.attributes"></div>
                                    <div v-html="data.value.recurring"></div>
                                    <div v-html="data.value.reservation"></div>
                                    <div v-html="data.value.edit"></div>
                                    <div v-html="data.value.warnings"></div>
                                </template>
                                <template v-slot:cell(unit)="data">
                                    <div v-html="data.value.unitprice"></div>
                                </template>
                                <template v-slot:cell(qty)="data">
                                    <div v-html="data.value.selector"></div>
                                </template>
                                <template v-slot:cell(total)="data">
                                    <div v-html="data.value.subtotal"></div>
                                </template>
                                <template v-slot:cell(remove)="data">
                                    <div v-html="data.value.href"></div>
                                </template>
                            </b-table>
                        </div>
                    </template>
                </div>
                @if (Model.Items.Any() && Model.DisplayTaxShippingInfo)
                {
                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <div class="tax-shipping-info">
                        @T(inclTax ? "Wishlist.TaxShipping.InclTax" : "Wishlist.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = TopicSeNameConstants.Shippinginfo }))
                    </div>
                }

                <div class="btn-group my-3">
                    @if (Model.IsEditable)
                    {
                        <b-button type="submit" name="updatecart" variant="info" class="update-wishlist-button d-flex align-items-center">
                            <b-icon font-scale="2" icon="arrow-clockwise" class="pr-2"></b-icon>
                            <span>@T("Wishlist.UpdateCart")</span>
                        </b-button>
                    }
                    @if (Model.DisplayAddToCart)
                    {
                        <b-button type="submit" name="addtocartbutton" variant="info" class="wishlist-add-to-cart-button d-flex align-items-center ml-1">
                            <b-icon font-scale="2" icon="cart" class="pr-2"></b-icon>
                            <span>@T("ShoppingCart.AddToCart")</span>
                        </b-button>
                    }
                    @if (Model.IsEditable && Model.EmailWishlistEnabled)
                    {
                        <b-button type="button" variant="secondary" class="email-a-friend-wishlist-button d-flex align-items-center ml-1" onclick="location='@Url.RouteUrl("EmailWishlist")'">
                            <b-icon font-scale="2" icon="envelope" class="pr-2"></b-icon>
                            <span class="d-sm-block d-none">@T("Wishlist.EmailAFriend")</span>
                        </b-button>
                    }
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="no-data text-center">
            @T("Wishlist.CartIsEmpty")
        </div>
    }
    @if (Model.IsEditable && Model.Items.Any())
    {
        <div class="row">
            <div class="col-12 share-info generalMarginSupporter text-center text-md-left">
                <span class="share-label">@T("Wishlist.YourWishlistURL"):</span>
                <a href="@Url.RouteUrl("Wishlist", new { customerGuid = Model.CustomerGuid })" class="small ml-2">@Url.RouteUrl("Wishlist", new { customerGuid = Model.CustomerGuid }, "http")</a>
            </div>
        </div>
    }
</div>
<script type="module" asp-location="Footer">
                    new Vue({
                        el: '#app',
                        data: {
                            name: 'Vue Theme',
                        },
                        data() {
                            return {
                                show: false,
                                fluid: false,
                                hover: false,
                                active: false,
                                scTimer: 0,
                                scY: 0,
                                fields: [
                                    @if (Model.ShowProductImages){
                                        <text>
                                            { key: 'picture', label: '@T("ShoppingCart.Image")',class: 'text-center' },
                                        </text>
                                    }
                                    { key: 'product', label: '@T("ShoppingCart.Product(s)")', class: 'text-center' },
                                    { key: 'unit', label: '@T("ShoppingCart.UnitPrice")', sortable: true, class: 'text-center' },
                                    { key: 'qty', label: '@T("ShoppingCart.Quantity")', sortable: true, class: 'text-center'  },
                                    { key: 'total', label: '@T("ShoppingCart.ItemTotal")', sortable: true, class: 'text-center'  },
                                    @if (Model.IsEditable){
                                        <text>
                                            { key: 'remove', label: '@T("Remove")' },
                                        </text>
                                    }
                                ],
                                items: [
                                    @foreach (var item in Model.Items)
                                    {
                                        <text>
                                    {
                                        picture: { src: '@item.Picture.ImageUrl', href: '@Url.RouteUrl("Product", new { SeName = item.ProductSeName })', alt: '@item.Picture.AlternateText', title: '@item.Picture.Title' },
                                        product: {
                                            name: '<a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>',
                                            @if (Model.ShowSku && !String.IsNullOrEmpty(item.Sku))
                                            {
                                                <text>
                                            sku: '<span class="sku-number">@item.Sku</span>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                            {
                                                <text>
                                            attributes: '<div class="attributes small">@Html.Raw(item.AttributeInfo)</div>',
                                                </text>
                                            }
                                            @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                            {
                                                <text>
                                            recuring: '<div class="recurring-info">@Html.Raw(item.RecurringInfo)</div>',
                                                </text>
                                            }
                                            @if (Model.IsEditable && item.AllowItemEditing)
                                            {
                                                <text>
                                            edit: '@{var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, Context.Request.Scheme);editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id);<div class="edit-item mb-1 mt-1"><a class="btn btn-sm btn-secondary" href="@editCartItemUrl">@T("Common.Edit")</a></div>}',
                                                </text>
                                            }
                                        },
                                        qty: {
                                            @if (Model.IsEditable)
                                            {
                                                <text>
                                                selector: '@if (item.AllowedQuantities.Count > 0){<select id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" class="custom-select form-control qty-dropdown">@foreach (var qty in item.AllowedQuantities){<option id="itemqty@(item.Id)" selected="@qty.Selected" value="@qty.Value">@qty.Value</option>}</select>}else{<input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="number" value="@(item.Quantity)" min="1" class="qty-input form-control text-center" />}',
                                                </text>
                                            } else {
                                                <text>
                                                selector: '<input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input-ro form-control text-center" readonly />'
                                                </text>
                                            }
                                        },
                                        unit: {
                                            unitprice: '<span class="product-unit-price price">@item.UnitPrice</span>'
                                        },
                                        total: {
                                            @if (!String.IsNullOrEmpty(item.Discount)) {
                                                <text>
                                                    subtotal: '<div class="d-flex flex-column"><p class="mb-0 prod-total">@item.SubTotal</p><div class="discount text-success text-center"><span>@T("ShoppingCart.ItemYouSave"): </span><span>@item.Discount</span></div>',
                                                </text>
                                            } else {
                                                <text>
                                                    subtotal: '<p class="mb-0 prod-total">@item.SubTotal</p>'
                                                </text>
                                            }
                                        },
                                        @if (Model.IsEditable)
                                        {
                                            <text>
                                            remove: {
                                                href: '<input type="checkbox" id="@T("Remove")-@(item.Id)" name="removefromcart" class="custom-control mx-auto custom-checkbox" value="@(item.Id)">'
                                            }
                                            </text>
                                        }
                                    },
                                        </text>
                                    }
                                ]
                            }
                        },
                        mounted() {
                            if (localStorage.fluid == "true") this.fluid = "fluid";
                            if (localStorage.fluid == "fluid") this.fluid = "fluid";
                            if (localStorage.fluid == "") this.fluid = "false";
                            window.addEventListener('scroll', this.handleScroll);
                            this.$root.$on('bv::dropdown::show', bvEvent => {
                                if (bvEvent.vueTarget.$el.getAttribute('data-level') === 'next') {
                                    this.isDropdown2Visible = true;
                                }
                            })
                            this.$root.$on('bv::dropdown::hide', bvEvent => {
                                if (bvEvent.vueTarget.$el.getAttribute('data-level') === 'next') {
                                    this.isDropdown2Visible = true;
                                }
                                if (this.isDropdown2Visible) {
                                    bvEvent.preventDefault()
                                }
                            })
                        },
                        watch: {
                            fluid(newName) {
                                localStorage.fluid = newName;
                            },
                        },
                        methods: {
                            productImage: function (event) {
                                var Imagesrc = event.target.parentElement.getAttribute('data-href');
                                var Image = event.target.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.querySelectorAll(".img-second")[0];
                                Image.setAttribute('src', Imagesrc);
                            },
                            handleScroll: function () {
                                if (this.scTimer) return;
                                this.scTimer = setTimeout(() => {
                                    this.scY = window.scrollY;
                                    clearTimeout(this.scTimer);
                                    this.scTimer = 0;
                                }, 100);
                            },
                            toTop: function () {
                                window.scrollTo({
                                    top: 0,
                                    behavior: "smooth"
                                });
                            },
                            isMobile: function () {
                                var check = false;
                                (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
                                return check;
                            },
                        }
                    });

</script>